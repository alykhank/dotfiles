# Functions {{{
### Retrieve current virtualenv info
function get_virtualenv() {
  [[ -n "$VIRTUAL_ENV" ]] && echo "($(basename "$VIRTUAL_ENV"))"
}

### Set flags for converting GitHub Markdown to HTML5 with Pandoc
function pandocmark() {
  [[ "$#" -eq 1 ]] || { echo "Usage: pandocmark infile.md"; return; }
  infile=$1
  outfile=$(basename "$infile")
  outfile=${outfile%.*}.html
  pandoc -f markdown_github -t html5 --smart -s "$infile" -o "$outfile"
  open "$outfile"
}
# }}}

# Options {{{
HISTFILE=$HOME/.zsh_history
### Increase session and persisted history sizes
HISTSIZE=10000
SAVEHIST=10000
### (zsh: Options)[http://zsh.sourceforge.net/Doc/Release/Options.html]
### If a new command line being added to the history list duplicates an older one, the older command is removed from the list (even if it is not the previous event).
setopt hist_ignore_all_dups
### This option both imports new commands from the history file, and also causes your typed commands to be appended to the history file.
setopt share_history

### Use emacs line editing mode
bindkey -e
### Enable smart directory navigation
setopt auto_cd
### Allow comments in interactive session
setopt interactivecomments
### Delete path segments separately with ^-W
bindkey '^W' vi-backward-kill-word
# }}}

# Exports {{{
export CLICOLOR=1
export EDITOR="vim"
# }}}

# Tab Completion {{{
### Enable Git prompt
GIT_PROMPT="/usr/local/etc/bash_completion.d/git-prompt.sh"
[[ -f "$GIT_PROMPT" ]] && source "$GIT_PROMPT"

### Enable tab completions
fpath=(/usr/local/share/zsh/site-functions $fpath)
autoload -Uz compinit && compinit
### Allow case-insensitive completion
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'
### Colorize completions
zstyle ':completion:*' list-colors ''
### Highlight matching completion
zstyle ':completion:*:*:*:*:*' menu select
### Enable completions on dotfiles
_comp_options+=(globdots)
### Enable completion from the middle of a word
setopt complete_in_word
### Use Shift-Tab to move backwards in completion list
bindkey '^[[Z' reverse-menu-complete
### Use history substring search
autoload -Uz up-line-or-beginning-search && zle -N up-line-or-beginning-search && bindkey '^[[A' up-line-or-beginning-search
autoload -Uz down-line-or-beginning-search && zle -N down-line-or-beginning-search && bindkey '^[[B' down-line-or-beginning-search
# }}}

# Prompt {{{
# Git PS1 Options {{{
# * indicates repo with unstaged changes
# + indicates repo with staged changes
GIT_PS1_SHOWDIRTYSTATE=1

# $ indicates repo with stashed changes
GIT_PS1_SHOWSTASHSTATE=1

# % indicates repo with untracked files
GIT_PS1_SHOWUNTRACKEDFILES=1

# show difference between HEAD and its upstream
# "<" indicates you are behind
# ">" indicates you are ahead
# "<>" indicates you have diverged
# "=" indicates that there is no difference
GIT_PS1_SHOWUPSTREAM="auto git"

# see more information about the identity of commits checked out as a detached HEAD
GIT_PS1_DESCRIBE_STYLE="branch"

# colored hint about the current dirty state
GIT_PS1_SHOWCOLORHINTS=1
# }}}

# Display path, git info, and prompt character
precmd() {
  local c_black=%F{black}
  local c_red=%F{red}
  local c_green=%F{green}
  local c_yellow=%F{yellow}
  local c_blue=%F{blue}
  local c_magenta=%F{magenta}
  local c_cyan=%F{cyan}
  local c_white=%F{white}

  ### put the current directory in title bar
  print -Pn "\e]2;%~\a"
  __git_ps1 "$c_yellow(%T)%f $c_red%B%n%b%f at $c_green%B%m%b%f in $c_blue%B%~%b%f" "
$(get_virtualenv)%(?.$c_blue.$c_red%S)%#%s%f "
  local battery_current=$(ioreg -rc AppleSmartBattery | sed -En 's/.*"CurrentCapacity" = ([0-9]+)/\1/p')
  local battery_max=$(ioreg -rc AppleSmartBattery | sed -En 's/.*"MaxCapacity" = ([0-9]+)/\1/p')
  local filled=$((((10*battery_current+battery_max-1)/battery_max)))
  local empty=$(((10-filled)))
  RPROMPT="$c_green${(r:filled::▸:)}${(r:empty::▹:)}%f"
}
# }}}

# Aliases {{{
### Enable colourized output for listing directory contents, append '/' to directories, and extra symbols after various filetypes for differentiation
alias ls='ls -FAh'

### Count number of lines
alias lc='wc -l'

### Create tar archives
alias ctar='tar -cvf'
alias ctarz='tar -cvzf'

### Extract files from tar archives
alias untar='tar -xvf'
alias untarz='tar -xvzf'

### Alias cat to [bat](https://github.com/sharkdp/bat)
hash bat 2>/dev/null && alias cat='bat'

### Alias find to [fd](https://github.com/sharkdp/fd)
hash fd 2>/dev/null && alias find='fd'

### Alias diff to [colordiff](http://www.colordiff.org)
hash colordiff 2>/dev/null && alias diff='colordiff'

### Create shorthand for git
alias g='git'

### Alias git to [hub](https://hub.github.com)
hash hub 2>/dev/null && eval "$(hub alias -s)"

### Launch iOS Simulator
SIMULATOR="$(xcode-select -p)/Applications/Simulator.app/"
alias ios='open "$SIMULATOR"'

### Pretty print JSON
alias json='python -m json.tool'

### Initialize [fasd](https://github.com/clvv/fasd)
hash fasd 2>/dev/null && eval "$(fasd --init auto)"

### Quickly open files with vim
alias v='f -e vim'
# }}}

# Extras {{{
### Use ~/.localrc to extend ~/.zshrc with custom options
if [[ -f ~/.localrc ]]; then
  source ~/.localrc
fi
# }}}

# vim:ft=sh:fdm=marker
