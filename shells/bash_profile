# Functions {{{
### Retrieve current virtualenv info
function get_virtualenv() {
  [[ -n "$VIRTUAL_ENV" ]] && echo "($(basename "$VIRTUAL_ENV"))"
}

### Set flags for converting GitHub Markdown to HTML5 with Pandoc
function pandocmark() {
  [[ "$#" -eq 1 ]] || { echo "Usage: pandocmark infile.md"; return; }
  infile=$1
  outfile=$(basename "$infile")
  outfile=${outfile%.*}.html
  pandoc -f markdown_github -t html5 --smart -s "$infile" -o "$outfile"
  open "$outfile"
}
# }}}

# Options {{{
### Append to history file instead of overwriting
shopt -s histappend
### Increase session and persisted history sizes
HISTSIZE=10000
HISTFILESIZE=10000
# }}}

# Exports {{{
export CLICOLOR=1
export EDITOR="vim"
# }}}

# Tab Completion {{{
### Enable Git Bash completion
GIT_COMPLETION="/usr/local/etc/bash_completion.d/git-completion.bash"
[[ -f "$GIT_COMPLETION" ]] && source "$GIT_COMPLETION"
### Enable Git prompt
GIT_PROMPT="/usr/local/etc/bash_completion.d/git-prompt.sh"
[[ -f "$GIT_PROMPT" ]] && source "$GIT_PROMPT"
### Enable Hub Bash completion
HUB_COMPLETION="/usr/local/etc/bash_completion.d/hub.bash_completion.sh"
[[ -f "$HUB_COMPLETION" ]] && source "$HUB_COMPLETION"
# }}}

# Prompt {{{
# Git PS1 Options {{{
# * indicates repo with unstaged changes
# + indicates repo with staged changes
GIT_PS1_SHOWDIRTYSTATE=1

# $ indicates repo with stashed changes
GIT_PS1_SHOWSTASHSTATE=1

# % indicates repo with untracked files
GIT_PS1_SHOWUNTRACKEDFILES=1

# show difference between HEAD and its upstream
# "<" indicates you are behind
# ">" indicates you are ahead
# "<>" indicates you have diverged
# "=" indicates that there is no difference
GIT_PS1_SHOWUPSTREAM="auto git"

# see more information about the identity of commits checked out as a detached HEAD
GIT_PS1_DESCRIBE_STYLE="branch"

# colored hint about the current dirty state
GIT_PS1_SHOWCOLORHINTS=1
# }}}

c_clear='\[\e[0m\]'
c_black='\[\e[0;30m\]'
c_red='\[\e[0;31m\]'
c_green='\[\e[0;32m\]'
c_yellow='\[\e[0;33m\]'
c_blue='\[\e[0;34m\]'
c_purple='\[\e[0;35m\]'
c_cyan='\[\e[0;36m\]'
c_white='\[\e[0;37m\]'

function test_exit() {
  local exit=$?
  [[ $exit -eq 0 ]] && echo "$c_blue" || echo "$c_red"
}

# Display path, git info, and prompt character
PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND;}"\
'color=$(test_exit);
__git_ps1 "$(get_virtualenv)\
$c_yellow(\A)$c_clear \
$c_red\u$c_clear \
at $c_green\h$c_clear \
in $c_blue\w$c_clear" "
$color\$$c_clear "'
# }}}

# Aliases {{{
### Enable colourized output for listing directory contents, append '/' to directories, and extra symbols after various filetypes for differentiation
alias ls='ls -FAh'

### Move up one directory
alias ..='cd ..'

### Count number of lines
alias lc='wc -l'

### Create tar archives
alias ctar='tar -cvf'
alias ctarz='tar -cvzf'

### Extract files from tar archives
alias untar='tar -xvf'
alias untarz='tar -xvzf'

### Alias cat to [ccat](https://github.com/jingweno/ccat)
hash ccat 2>/dev/null && alias cat='ccat'

### Alias find to [fd](https://github.com/sharkdp/fd)
hash fd 2>/dev/null && alias find='fd'

### Alias diff to [colordiff](http://www.colordiff.org)
hash colordiff 2>/dev/null && alias diff='colordiff'

### Create shorthand for git
alias g='git'
__git_complete g __git_main

### Alias git to [hub](https://hub.github.com)
hash hub 2>/dev/null && eval "$(hub alias -s)"

### Launch iOS Simulator
SIMULATOR="$(xcode-select -p)/Applications/Simulator.app/"
alias ios='open "$SIMULATOR"'

### Pretty print JSON
alias json='python -m json.tool'

### Initialize [fasd](https://github.com/clvv/fasd)
hash fasd 2>/dev/null && eval "$(fasd --init auto)"

### Quickly open files with vim
alias v='f -e vim'
# }}}

# Extras {{{
### Use ~/.bashrc to extend ~/.bash_profile with custom options
if [[ -f ~/.bashrc ]]; then
  source ~/.bashrc
fi
# }}}

# vim:ft=sh:fdm=marker
