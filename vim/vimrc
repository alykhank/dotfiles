"/============================\"
"|.vimrc                      |"
"|Author: Alykhan Kanji       |"
"|Homepage: http://alykhan.com|"
"\============================/"

" Basics {{{
set nocompatible                " Be iMproved
" }}}

" Map Leaders {{{
let mapleader = ","             " Map leader key
let maplocalleader = "\\"       " Map local leader key
" }}}

" Plugins {{{
" Vundle {{{
filetype off                    " required
" set the runtime path to include Vundle and initialize
set runtimepath+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'      " Plugin manager
" }}}

" Core Improvements {{{
Plugin 'tpope/vim-commentary'   " Comment lines with 'gcc'
Plugin 'tpope/vim-endwise'      " Automatically close blocks
Plugin 'tpope/vim-repeat'       " Repeat actions with '.'
Plugin 'tpope/vim-speeddating'  " Increment dates and times with ^A/^X
Plugin 'tpope/vim-surround'     " Surround text with tags using 'ys{motion}'
Plugin 'tpope/vim-unimpaired'   " Pairs of handy bracket mappings
Plugin 'vim-scripts/matchit.zip' " Navigate between matching tags with '%'
Plugin 'henrik/vim-indexed-search' " Number search results
Plugin 'docunext/closetag.vim'  " HTML/XML tags will close automatically with '</'
Plugin 'editorconfig/editorconfig-vim' " Automatically adhere to project editor configurations
let g:EditorConfig_exclude_patterns = ['fugitive://.*'] " Play nice with vim-fugitive
" }}}

" VCS {{{
Plugin 'tpope/vim-fugitive'     " Git integration
Plugin 'tommcdo/vim-fugitive-blame-ext' " Show commit message subject lines in :Gblame view
Plugin 'airblade/vim-gitgutter' " Show diff symbols in gutter
" }}}

" Status Line {{{
Plugin 'bling/vim-airline'      " Supercharged statusline
let g:airline#extensions#tabline#enabled = 1
" }}}

" Language Support {{{
Plugin 'scrooloose/syntastic'   " Check syntax on save
Plugin 'tpope/vim-git'          " Git runtime files
Plugin 'othree/html5.vim'       " HTML5 runtime files
Plugin 'Glench/Vim-Jinja2-Syntax' " Jinja2 runtime files
Plugin 'tpope/vim-liquid'       " Liquid runtime files
Plugin 'Keithbsmiley/swift.vim' " Swift runtime files
Plugin 'kchmck/vim-coffee-script' " CoffeeScript runtime files
Plugin 'ap/vim-css-color'       " Highlight colors in CSS files
Plugin 'lervag/vimtex'          " LaTeX runtime files
let g:tex_flavor = "latex"      " Use LaTeX instead of plain TeX
let g:vimtex_view_general_viewer
    \ = '/Applications/Skim.app/Contents/SharedSupport/displayline'
let g:vimtex_view_general_options = '-r @line @pdf'
" Open Skim.app in the background with the corresponding line in the PDF highlighted
noremap <leader>lr :silent !displayline -b -g <C-r>=line('.')<CR> <C-r>=expand('%:r')<CR>.pdf<CR><C-l>
Plugin 'solarnz/thrift.vim'     " Apache Thrift runtime files
Plugin 'vim-scripts/groovy.vim' " Groovy runtime files
Plugin 'tfnico/vim-gradle'      " Recognize .gradle files as Groovy
" }}}

" Ctags {{{
Plugin 'majutsushi/tagbar'      " Interface for browsing and navigating tags
Plugin 'xolox/vim-easytags'     " Update ctags on save
Plugin 'xolox/vim-misc'         " Required for vim-easytags
" }}}

" Autocomplete {{{
Plugin 'Valloric/YouCompleteMe' " Autocomplete for most programming languages
" }}}

" Snippets {{{
Plugin 'SirVer/ultisnips'       " Provide user-editable snippets via triggers
let g:UltiSnipsExpandTrigger="<C-j>"
" }}}

" Search {{{
Plugin 'ctrlpvim/ctrlp.vim'     " Search through files, recently used, buffers
let g:ctrlp_extensions = ['tag', 'buffertag'] " Also search through tags
" }}}

" All of your Plugins must be added before the following line
call vundle#end()               " required
filetype plugin indent on       " required
" }}}

" Syntax {{{
syntax enable                   " Enable syntax highlighting
set showmatch                   " Highlight matching braces
set synmaxcol=200               " Limit syntax highlighting by column number
" }}}

" Colorscheme {{{
colorscheme industry
set background=dark             " Set default background colour
nnoremap <silent> <leader>b :let &background = ( &background ==? "dark" ? "light" : "dark" )<CR>
if exists('+colorcolumn')
  augroup highlights
    autocmd!
    " Hide the column line when the split is not in focus
    autocmd WinLeave * setlocal colorcolumn=""
    autocmd WinEnter * setlocal colorcolumn=+1
  augroup END
endif
" }}}

" Basics {{{
set encoding=utf-8              " Set encoding to UTF-8
set showcmd                     " Display incomplete commands
set noshowmode                  " Hide default mode indicator
set laststatus=2                " Always display status line
set number                      " Show current line number
set ruler                       " Show the current row and column
set display+=lastline           " Display as much as possible of long lines
set scrolloff=10                " Scroll frame when close to top or bottom
set sidescrolloff=20            " Scroll frame when close to left or right
set sidescroll=1                " Set number of columns to scroll sideways at a time
set visualbell                  " Flash instead of beeping
set title                       " Display `titlestring` as the TERM title
set wildmenu                    " Show command-line completions in statusline
set autoread                    " Automatically reread externally changed files
set clipboard=unnamed           " Use system clipboard for yank and put
set ttimeoutlen=50              " Set explicit timeout for mapped key sequences
" }}}

" Whitespace {{{
set list                        " Show invisibles
set listchars=tab:▸\ ,extends:❯,precedes:❮ " Choose characters to represent invisibles
" Only display trailing whitespace in modes other than Insert
augroup trailing
  au!
  au BufRead * :setlocal listchars+=trail:•
  au InsertEnter * :setlocal listchars-=trail:•
  au InsertLeave * :setlocal listchars+=trail:•
augroup END
set tabstop=4                   " Set literal tab width and display
set softtabstop=4               " Set tab width for insertion and <BS>
set shiftwidth=4                " Set CTRL-T, > (add indent) & CTRL-D, < (remove indent) widths
set expandtab                   " Ensure tabs are expanded to spaces
set smarttab                    " Insert shiftwidth tabs at start of line, softtabstop tabs elsewhere
set shiftround                  " Round indents to multiples of shiftwidth
set autoindent                  " Enable autoindentation for new lines to match indent level of previous line
set smartindent                 " Automatically indent lines after opening braces
set cindent                     " Enable indenting for C-style source code (including C++ and Java)
set backspace=indent,eol,start  " Backspace through everything in insert mode
" }}}

" Wrapping {{{
set linebreak                   " Wrap only at word boundaries
if exists("+breakindent")
  set breakindent               " Indent wrapped portion of lines to matching level
endif
set showbreak=↪                 " Use character to indicate wrapped lines
if exists('+colorcolumn')
  set colorcolumn=+1            " Highlight the column after `textwidth`
endif
" Disabled Format Options {{{
" t: Auto-wrap text using textwidth
set formatoptions-=t
" r: Automatically insert the current comment leader after hitting <Enter> in Insert mode
set formatoptions-=r
" o: Automatically insert the current comment leader after hitting 'o' or 'O' in Normal mode
set formatoptions-=o
" }}}
" Enabled Format Options {{{
" j: Where it makes sense, remove a comment leader when joining lines
if v:version + has("patch541") >= 704
  set formatoptions+=j
endif
" }}}
" }}}

" Searching {{{
set hlsearch                    " Highlight search terms...
set incsearch                   " ...dynamically as they are typed
set ignorecase                  " Ignore case when searching...
set smartcase                   " ...except when at least one uppercase letter is included
" Clear search highlights by pressing return
nnoremap <silent> <CR> :nohlsearch<CR>
" }}}

" Folding {{{
set foldmethod=indent           " Enable code folding based on indentation
set foldlevelstart=4            " Load files with outermost folds open
" Use <Space> to toggle folds
nnoremap <Space> za
vnoremap <Space> za
" }}}

" Splits {{{
" Sets the default splitting to be to the bottom and to the right
set splitbelow
set splitright
" }}}

" Temporary Files {{{
" Store temporarily files globally instead of in working directory
set backupdir=~/.vim/tmp/backup
if !isdirectory(expand(&backupdir))
  call mkdir(expand(&backupdir), "p")
endif
set directory=~/.vim/tmp/swap
if !isdirectory(expand(&directory))
  call mkdir(expand(&directory), "p")
endif
if has('persistent_undo')
  set undofile                  " Persist undo tree across launches
  set undodir=~/.vim/tmp/undo
  if !isdirectory(expand(&undodir))
    call mkdir(expand(&undodir), "p")
  endif
endif
" }}}

" Mappings {{{
" Quickly edit configuration files
nnoremap <leader>ev :e $MYVIMRC<CR>
nnoremap <leader>vv :vsplit $MYVIMRC<CR>
nnoremap <leader>vb :vsplit ~/.bash_profile<CR>
nnoremap <leader>vz :vsplit ~/.zshrc<CR>
nnoremap <leader>vg :vsplit ~/.gitconfig<CR>
" Quickly source .vimrc
nnoremap <leader>sv :source $MYVIMRC<CR>
" Make j and k move up and down one visible line, even when wrapped
noremap j gj
noremap k gk
" Make gj and gk move up and down one logical line, even when wrapped
noremap gj j
noremap gk k
set pastetoggle=<leader>p       " Toggle paste mode
" Display Tagbar
nnoremap <silent> <leader>t :TagbarToggle<CR>
" Invoke CtrlP in Buffer search mode
nnoremap <C-L> :CtrlPBuffer<CR>
" Reformat JSON to pretty print format
nnoremap <leader>j :%!python -m json.tool<CR>
" }}}

" Abbreviations {{{
if !exists("*Eatchar")
  function Eatchar(pat)
    let c = nr2char(getchar(0))
    return (c =~ a:pat) ? '' : c
  endfunction
endif
" }}}

" User Commands {{{
" Allow accidental uppercase versions of common file commands
command! -bang -nargs=? -complete=file E e<bang> <args>
command! -bang -nargs=? -complete=file W w<bang> <args>
command! -bang -nargs=? -complete=file Wq wq<bang> <args>
command! -bang -nargs=? -complete=file WQ wq<bang> <args>
command! -bang Wa wa<bang>
command! -bang WA wa<bang>
command! -bang Q q<bang>
command! -bang QA qa<bang>
command! -bang Qa qa<bang>
" }}}

" vim:fdm=marker
